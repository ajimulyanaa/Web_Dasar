windows event
windows event adalah kejadian kejadian yang berasal daei browser pada window.

============
=>  onload

Event ini akan terjadi setelah halaman web selesai diunduh dan ditampilkan.

=> onpageshow

Event ini akan terjadi jika halaman web kembali dikunjungi kembali (berbeda dengan onload, karena event onload tidak akan terjadi jika halaman web diambil dari cache).

=> onresize

Event ini akan terjadi jika window browser di-resize oleh user atau oleh hal lainnya.

===========
Form events
form event adalah kejadian kejadian yang berasal dari elemen sebuah html dengan tag <form> 

=> onreset

Event ini akan terjadi ketika user menekan tombol ‘reset’’ pada elemen form.

=> onsubmit

Event ini akan terjadi ketika user menekan tombol ‘submit’’ pada form.

==========
Keyboard Event
keyboard event merupakan kejadian kejadian yang berasal dari tekan atau dilepasnya tombol pada keyboard.
=> onkeydown

Event ini akan terjadi ketika sebuah tombol pada keyboard ditekan.

onkeypress	

=> Event ini terjadi setelah onkeydown, di mana tombol masih dalam keadaan ditekan. Event ini tidak dapat mendeteksi tombol fungsi seperti CTRL, SHIFT, ALT, ESC, BACKSPACE, dan sebagainya.

=>onkeyup

Event ini akan terjadi ketika sebuah tombol pada keyboard dilepas.

=========
clipboard event
adalah kejadian yang berasal dari proses cut,copy atau paste element.
=>oncopy

Event ini akan terjadi ketika kita melakukan proses copy.

=>oncut

Event ini akan terjadi ketika kita melakukan proses cut.

=>onpaste

Event ini akan terjadi ketika kita melakukan proses paste.

======
Mouse event
adalah kejadian kejadian yang berasal dari kegiatan klik mouse.

=> onclick

Event ini akan terjadi ketika kita menekan elemen tertentu dengan cursor.

=> ondblclick

Event ini akan terjadi ketika kita menekan elemen tertentu dua kali berturut-turut dengan cursor.

=> onmouseover

Event ini akan terjadi ketika cursor kita berada di atas sebuah elemen tertentu.

Menambahakan even handler menerapaka event handler inline

=============================
Menambahkan event handler dengan addEventListener()
Method addEventListener() menerima beberapa parameter, tetapi yang perlu kita ketahui sementara adalah parameter pertama dan kedua. Parameter pertama harus diisi dengan tipe event yang digunakan, yang mana akan men-trigger atau memancing kode JavaScript untuk menjalankan sebuah fungsi khusus. Function khusus diletakkan pada parameter kedua yang akan dijalankan ketika tipe event yang didefinisikan terjadi. 

Ada satu aturan yang perlu kita ketahui, yaitu nama event yang kita definisikan tidak seperti sebelumnya menggunakan onload dan onclick (tanpa imbuhan "on"). Namun, kita dapat menuliskannya secara langsung. Sebagai contoh function onload menjadi ‘load’, function onclick menjadi ‘click’. Untuk daftar lengkap event apa saja yang didukung dapat dilihat di sini: https://developer.mozilla.org/en-US/docs/Web/Events.

Kelebihannya adalah kita bisa menambahkan satu atau lebih fungsi sebagai event handler. Fitur itulah yang tidak dapat dilakukan oleh event handler inline.

<script>
  // contoh penerapan
  element.onclick = fungsiA;
  element.onclick = fungsiB;
</script>

Selain itu, terdapat permasalahan lagi jika tidak menggunakan addEventListener. Kode di atas, kita memanggil function onclick dan melakukan assignment dengan fungsiA dan fungsiB. Sayangnya, fungsiA ini akan ter-overwrite alias tertimpa fungsiB. Oleh karena itu, jika elemen di-klik, hanya fungsiB saja yang dijalankan. Bagaimana cara kita menemukan solusi agar fungsiA dan fungsiB dijalankan ketika elemen di-klik? Gunakanlah method addEventListener()!

Selain mampu menambahkan multiple event listener dalam satu event, kita juga akan mempelajari penerapan method addEventListener() lebih tepat untuk skenario-skenario tertentu ketimbang menggunakan event handler yang dicontohkan sebelumnya. Method addEventListener() juga mendukung fitur “event bubbling dan capturing”


=============
Menambahkan custom event
Custom Event pada materi ini merujuk kepada penggunaan class Event() untuk membuat event dengan nama yang sudah kita tentukan sendiri. Misal, sebelumnya kita telah menggunakan nama-nama event yang sudah “dikenal” oleh JavaScript yakni seperti “click” dan “load’. Apakah mungkin jika kita membuat event sendiri? Misalnya, event dengan nama "eventBuatanKita"? Jawabannya, sangat mungkin!

// membuat custom event
const eventBuatan = new Event('eventBuatanKita');
 
// meletakkannya pada sebuah method addEventListener()
element.addEventListener('eventBuatanKita');

 method addEventListener, custom event memungkinkan kita untuk menjalankan sebuah event handler setelah sebuah event handler lain selesai dipanggil.

 BUBLING DAN capturing

 1. Event BUBLING
      fenomena bubbling adalah ketika sebuah event terjadi pada sebuah elemen, maka event handler milik elemen tersebut akan dijalankan terlebih dahulu yang diikuti event handler elemen parent-nya, dan seterusnya sampai elemen paling atas.
  2. capturing
       Capturing merupakan kebalikan dari bubbling yang akan men-trigger event handler dari parent ke child.